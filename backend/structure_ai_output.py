import re

def structure_output(raw_output: str) -> str:
    """
    Processes the raw output from the AI to structure it into a clean markdown report.
    It looks for specific sections generated by the prompt and formats them.
    """
    print(f"DEBUG (structure_output): Raw output received:\n{raw_output[:1000]}...") # Print first 1000 chars for brevity

    # Clean raw_output from potential leading/trailing markdown separators
    cleaned_raw_output = raw_output.strip().lstrip('---').strip()

    # Default values in case parsing fails
    nutritional_analysis = "No nutritional analysis was provided."
    personalized_recommendations = "No personalized recommendations were provided."

    # Find the content for "Nutritional Analysis"
    # More flexible regex: looks for "Nutritional Analysis" followed by content until "Personalized Recommendations"
    analysis_match = re.search(r"(?:###\s*\*\*Part 1: Nutritional Analysis\*\*|Nutritional Analysis)\s*(.*?)(?:###\s*\*\*Part 2: Personalized Recommendations\*\*|Personalized Recommendations|\Z)", cleaned_raw_output, re.DOTALL | re.IGNORECASE)
    
    print(f"DEBUG (structure_output): analysis_match found: {analysis_match is not None}")
    if analysis_match:
        nutritional_analysis = analysis_match.group(1).strip()
        # Color sub-topics in Nutritional Analysis (bolded text)
        nutritional_analysis = re.sub(r'(\*\*.*?\*\*)', r'<span style="color: #800080; font-weight: bold;">\1</span>', nutritional_analysis)
        # Replace single newlines with HTML line breaks
        nutritional_analysis = re.sub(r'\n(?!\n|\s*[-*+] )', '<br/>', nutritional_analysis)
        print(f"DEBUG (structure_output): Extracted Nutritional Analysis:\n{nutritional_analysis[:500]}...")

    # Find the content for "Personalized Recommendations"
    # More flexible regex: looks for "Personalized Recommendations" followed by content until end of string
    recommendations_match = re.search(r"(?:###\s*\*\*Part 2: Personalized Recommendations\*\*|Personalized Recommendations)\s*(.*)", cleaned_raw_output, re.DOTALL | re.IGNORECASE)
    
    print(f"DEBUG (structure_output): recommendations_match found: {recommendations_match is not None}")
    if recommendations_match:
        personalized_recommendations = recommendations_match.group(1).strip()
        # Color sub-topics in Personalized Recommendations (bolded text)
        personalized_recommendations = re.sub(r'(\*\*.*?\*\*)', r'<span style="color: #800080; font-weight: bold;">\1</span>', personalized_recommendations)
        # Replace single newlines with HTML line breaks
        personalized_recommendations = re.sub(r'\n(?!\n|\s*[-*+] )', '<br/>', personalized_recommendations)
        print(f"DEBUG (structure_output): Extracted Personalized Recommendations:\n{personalized_recommendations[:500]}...")

    # Format the final markdown output
    markdown_output = "# AI Dietary Feedback\n\n"
    markdown_output += "## <span style=\"color: #dc3545; font-weight: bold;\">Nutritional Analysis</span>\n"
    markdown_output += nutritional_analysis + "\n\n"
    markdown_output += "## <span style=\"color: #dc3545; font-weight: bold;\">Personalized Recommendations</span>\n"
    markdown_output += personalized_recommendations + "\n"

    return markdown_output
